// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(uuid())
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  email                  String    @unique
  password               String
  firstName              String?
  lastName               String?
  stripeAccountId        String?
  clients     Client[]
  invoices    Invoice[]
}

model Client{
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ownerId     String
  owner       User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  name        String
  address     String
  email       String
  phoneNumber String @default("000-000-0000") 
  invoices    Invoice[]     
  deleted     Boolean   @default(false)

  @@unique([ownerId, name])
  @@index([ownerId, id])
}

enum INVOICE_STATUS {
  SENT
  NOT_SENT
}

enum PAYMENT_STATUS {
  PAID
  NOT_PAID
}

model Invoice {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  ownerId           String
  owner             User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  clientId          String
  client            Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  status            INVOICE_STATUS @default(NOT_SENT)
  paymentStatus     PAYMENT_STATUS @default(NOT_PAID)
  due               String?
  items             Item[]
  subTotal          Float     @default(0)
  tax               Float     @default(0)
  total             Float     @default(0)
  deleted           Boolean   @default(false)
  

}

model Item {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  name        String
  price       Float
  hours       Float
  deleted     Boolean   @default(false)
}